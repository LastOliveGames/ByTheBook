functions:
  - userid: auth.uid
  - currentUserKey: string && (userid == next || userid == 'server')
  - userKey: string && (userid == 'server' || isUser(next))

  - isPlay(key): root.plays.hasChild(key)
  - isPublisher(key): root.publishers.hasChild(key)
  - isUser(userKey): root.users.hasChild(userKey)

  - isPublisherOf(playKey): >
      root.publishers[root.plays[playKey].playbill.core.publisherKey].members[userid] == 'editor'
  - isOwnerOf(playKey): root.plays[playKey].team[userid].role == 'owner' || isPublisherOf(playKey)
  - isEditorOf(playKey): root.plays[playKey].team[userid].role == 'editor' || isOwnerOf(playKey)
  - isAuthorOf(playKey): root.plays[playKey].team[userid].role == 'author' || isEditorOf(playKey)
  - isTesterOf(playKey): root.plays[playKey].team[userid].role == 'tester' || isAuthorOf(playKey)

  # TODO: figure out how to break locks, and what to do about lost work
  - canWriteLock(editsAllowed): >
      editsAllowed && prev == null && next.userKey == userid && next.timestamp == currentTimestamp ||
      prev.userKey == next.userKey && prev.timestamp == next.timestamp ||
      prev.userKey == userid && next == null

  - currentTimestamp: number && (now - next > -10000 && now - next < 10000 || userid == 'server')
  - monotonicallyIncreasing: prev == null || next >= prev || userid == 'server'


types:
  lock: &Lock
    userKey: required string && isUser(next) && (prev == null || next == null || prev == next)
    timestamp: required currentTimestamp && (prev == null || next == null || prev == next)

root:
  .read/write: userid == 'server'
  .ref: nextRoot

  plays:
    $playKey:
      .ref: play
      .read: isTesterOf($playKey)  # implied by isAuthorOf, isEditorOf, or isOwnerOf too
      team:
        .write: isOwnerOf($playKey)
        $userKey:
          role: required oneOf('contributor', 'tester', 'author', 'editor', 'owner')
      playbill: &Playbill
        .value: required
        .write: data.lock.userKey == userid && next.lock == null
        lock:
          <<: *Lock
          .write: canWriteLock(isEditorOf($playKey))
        core:
          .value: required
          title: required string
          publisherKey: required string && isPublisher(next)
          thumbUrl: string
        teaser: string
        art: &Art
          key: required string
          imageUrl: required string
          prompt: string
          generator: string
        moods:
          .value: required
          m0:
            lo: required string
            hi: required string
          m1:
            lo: required string
            hi: required string
          m2:
            lo: required string
            hi: required string
      acts:  # updated atomically on server by editors
        .value: required next.hasChildren()
        $actKey:
          ordinal: required number  # act number: 1, 2, 3, ...
          remixes:
            .value: next.hasChild('base')
            # The act 1 intro beat name is used as the remix name.
            $remixKey:
              introBeatKey: required string && play.beats.hasChild(next)
              # Currently the scenes beat should be the same in every remix.
              # TODO: consider letting remixes alter their list of scenes
              scenesBeatKey: required string && play.beats.hasChild(next)
              outroBeatKey: required string && play.beats.hasChild(next)
      cast: &Cast
        .value: required next.hasChild('narrator')
        .write: data.lock.userKey == userid && next.lock == null
        lock:
          <<: *Lock
          .write: canWriteLock(isEditorOf($playKey))
        $castKey:  # always has 'narrator'
          name: required string && ($castKey != 'narrator' || next == 'Narrator')
          alias: string
          voice:
            name: required string
            rate: number
            pitch: number
          traits:
            .value: $castKey !== 'narrator'
            t0: string
            t1: string
            t2: string
          stances:
            .value: required next.hasChild('neutral')
            $stanceKey:  # always has 'neutral'
              name: required string && ($stanceKey != 'neutral' || next == 'neutral')
              inflection: string  # defaults to 'neutral'
              art: *Art
      sounds:
        .write: isAuthorOf($playKey) && prev == null
        $soundKey:
          .write: data.lock.userKey == userid && next.lock == null
          lock:
            <<: *Lock
            .write: canWriteLock(isAuthorOf($playKey))
          name: required string
          duration: required number  # in millis
          mediaUrl: required string
          sourceUrl: string
      tree:
        # Not locked -- updates must be instantaneous and transactional
        .write: isAuthorOf($playKey)
        $beatKey:
          # comma-separated list of ordered children beat keys
          .value: string && play.beats.hasChild($beatKey)
      beats:
        # TODO: adjust .write to allow suggestions
        .write: isAuthorOf($playKey) && prev == null
        $beatKey: &Beat
          .write: data.lock.userKey == userid && next.lock == null
          lock:
            <<: *Lock
            .write: canWriteLock(isAuthorOf($playKey))
          name: required string  # the prompt from the trove stripped of any speech markup
          # kind: L=linear, C=choice, F=first, R=random, I=interrupt, S=suspension
          kind: required oneOf('L', 'C', 'F', 'R', 'I', 'S')
          repeating: boolean
          draft: boolean
          thumbUrl: string  # TODO: remove and blindly use well-known URL?
      published:
        timestamp: required number
        version: required string
        title: required string
        publisherKey: string && isPublisher(next)
        coverArtUrl: string
        lowDuration: number
        highDuration: number
        numWords: required number
        numRemixes: required number
        bundleUrl: required string

  # External store of beat data that can be loaded as-needed, to reduce bandwidth requirements when
  # loading the core play structures.
  trove:
    $playKey:
      .read: isTesterOf($playKey)  # implied by isAuthorOf, isEditorOf, or isOwnerOf too
      fatBeats:
        $beatKey: &TroveBeat
          .value: nextRoot.plays[$playKey].beats.hasChild($beatKey)
          .write: >
            root.plays[$playKey].beats[$beatKey].lock.userKey == userid &&
            nextRoot.plays[$playKey].beats[$beatKey].lock == null
          prompt: string
          script: string
          art: *Art
          backgroundSound: string && root.plays[$playKey].sounds[next] != null
          condition:
            clock: string && next.val().matches(/^\d+:\d+$/)  # lower and upper beat clock bounds
            moods: string && next.val().matches(/^(-?\d+:-?\d+)?;(-?\d+:-?\d+)?;(-?\d+:-?\d+)?$/)
            traits:
              $castKey: string && next.val().matches(/^(\d+:\d+)?;(\d+:\d+)?;(\d+:\d+)?$/)
          effects:  # act clock auto +1 if script is non-empty; not customizable
            moods: string && next.val().matches(/^([+-]\d+)?;([+-]\d+)?;([+-]\d+)?$/)
            traits:
              $castKey: string && next.val().matches(/^([+-]\d+)?;([+-]\d+)?;([+-]\d+)?$/)
          stage:
            $castKey:
              location: required oneOf('left', 'center', 'right')

  publishers:
    $publisherKey:
      .read: data.members[userid] != null
      public:
        .read: true
        name: string
        avatarUrl: string
      credits:
        # TODO: figure out how credits for running generators work; how to do rate limiting if they
        # run out; and how to deal with unsolicited suggestions.
        amount: number
      members:
        .write: data[userid].role == 'owner'
        $userKey:
          role: required oneOf('owner', 'editor')

  users:
    $userKey:
      .read: userid == $userKey
      public:
        .read: true
        .write: userid == $userKey
        name: string  # required to contribute or join a team
        avatarUrl: string
      indexes:
        plays:
          lastUpdateTimestamp: required number
          contents:
            $playKey:
              .value: isPlay($playKey)
              maker: oneOf('contributor', 'tester', 'author', 'editor', 'owner')
              publisher: boolean
              player: boolean
              hidden: boolean
        publishers:
          lastUpdateTimestamp: required number
          contents:
            $publisherKey:
              .value: isPublisher($publisherKey)
              member: boolean
      rateLimiting:
        playCreation:
          lastTimestamp: required number
          lastPlayKey: required string
      edits:
        .write: userid == $userKey
        $playKey:
          playbill:
            <<: *Playbill
            .value: "true"
          cast:
            <<: *Cast
            .value: next.hasChild('narrator')
          beats:
            $beatKey: *Beat
          fatBeats:
            $beatKey: *TroveBeat
          treeMods:
            $beatKey:
              parentBeatKey: required string
              precedingBeatKeys: string  # comma-separated beat keys, nearest last
